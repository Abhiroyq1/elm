One-Year Plan
~~~~~~~~~~~~~
One-Year Plan for Elm and Related Innovation

.. _scikit-learn: https://scikit-learn.org
.. _xarray: https://xarray.pydata.org
.. _YAML: https://yaml.org

:ref:`elm` supports workflows of unsupervised or supervised learning models, including clustering algorithms, classification, and regression, including common spatial or statistical preprocessing methods that may be run in a pipeline of transformers with adjustable parameters. :ref:`elm` follows conventions of popular Python machine learning tools, e.g. `scikit-learn`_


.. figure:: images/NASA_diagram.png
   :alt: Components of Elm

    Figure 1. Components of Elm


Elm’s Capabilities
------------------
* Supervised models

   * elm.pipeline.steps.linear_model

* Unsupervised models

   * Clustering
   * Manifold
   * Decomposition

* Statistical preprocessors and normalization
* Custom estimators
* Multi-model inference
* Hyperparameterization

   * Evolutionary algorithms
      * Custom batch model fitting in generations

* Hierarchical modeling
* Cross validation
* Feature engineering pipelines
* Data structure flexibility
* Parallel machine learning


Use cases
---------

* Data assimilation - Reanalysis
* Elm’s Usage Patterns


Elm can be used in Python, following common usage conventions established tools like `scikit-learn`_ (for machine learning) and `xarray`_ (for spatial data).


* Elm - Usage in Python - The most flexible way to use Elm is conda-installing the Elm package and writing Python scripts that extend Elm model selection classes or instantiate Elm’s Pipeline class.  
* :ref:`Elm-UI` - Elm has a user interface for common machine learning tasks with rasters or multi- or hyperspectral imagery (to be developed later in Phase II).
* :ref:`Elm-CLI` - Elm pipelines can be run from a :ref:`YAML` format configuration that is generated by the Elm-UI or created manually.


Elm uses a Pipeline (:ref:`elm.pipeline.Pipeline`) to represent series of transformations on machine learning input data where the transformers may be hyperparameterized (See :ref:`Pipeline Conventions in the scikit-learn` documentation for more reading).  Elm extends the concept of scikit-learn’s Pipeline in the following ways:
* Elm allows most pipeline specifications via a :ref:`YAML` format text file
* Elm Pipeline’s allow transformations on Xarray data structures, e.g. reshaping a collection of rasters or N-D arrays to an input feature matrix, while scikit-learn Pipeline generally works with a 2-D numpy array
* Elm’s Pipeline uses dask for running scikit-learn models in embarrassingly-parallel batches


Elm can be extended for custom workflows by following the :ref:`scikit-learn patterns for custom estimators`.


Elm-UI
------

Exploring inputs and results
Feature labeling map tools
Monitoring job progress
Templates for ML pipelines

See also: 
* :ref:`Proposal: Easy apps and dashboards from notebooks`


Elm-CLI
-------

Command-line interface
Execute pipeline definition
Override pipeline parameters
Configure dask concurrency


Elm Components
--------------

Xarray 
Scikit-learn
Xarray_filters
Dask
Earthio


Elm-Earthio-NLDAS
-----------------

:ref:`Elm-Earthio-NLDAS` is a repository that experiments with the NLDAS data, e.g. the scripts and notebooks that will create the December AGU poster.  We plan to use this repo in Phase II for assets that are directly related to integration with NLDAS like the AGU poster and future research to operations. The goal is that :ref:`Elm-Earthio-NLDAS` drives ideas and lets us know what is not working in Elm and that general utilities may be extracted from the NLDAS-specific research. For example, the NSGA-2 experiment in the :ref:`Elm-Earthio-NLDAS` repo motivated this :ref:`issue 185` in Elm to provide a wider range of hyperparameter control options.


PyData / Scipy / Community open source packages
-----------------------------------------------

Deap
Pandas


Background Material on Python Conventions
-----------------------------------------

