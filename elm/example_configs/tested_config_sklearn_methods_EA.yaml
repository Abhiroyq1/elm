data_sources:
  synthetic:
    sample_from_args_func: elm.pipeline.tests.util:random_elm_store
    sampler_args: []
ensembles:
  save_one: {saved_ensemble_size: 1}
feature_selection:
  top_n:
    choices: all
    kwargs: {percentile: 80}
    scoring: f_classif
    selection: sklearn.feature_selection:SelectPercentile
model_scoring:
  testing_model_scoring:
    score_weights: [-1]
    scoring: elm.model_selection.kmeans:kmeans_aic
param_grids:
  example_param_grid:
    control:
      crossover_method: cxTwoPoint
      cxpb: 0.3
      early_stop:
        abs_change: [10]
        agg: all
      eta: 20
      indpb: 0.5
      init_pop: random
      k: 4
      mu: 4
      mutate_method: mutUniformInt
      mutpb: 0.9
      ngen: 2
      select_method: selNSGA2
    feature_selection:
      top_n:
        kwargs:
          percentile: [30, 40, 50, 60, 70, 80, 90]
    kmeans__n_clusters: [3, 4, 5, 6, 7, 8]
    pca__n_components: [2, 3, 4, 5]
    sample_pipeline: [minimal, top_n]
pipeline:
- {param_grid: example_param_grid, sample_pipeline: minimal, train: kmeans}
sample_pipelines:
  minimal:
  - {flatten: F}
  - {sklearn_preprocessing: require_positive}
  - {sklearn_preprocessing: log10}
  - {sklearn_preprocessing: standard}
  - {method: fit_transform, transform: pca}
  nothing:
  - {flatten: F}
  top_n:
  - {flatten: F}
  - {sample_pipeline: minimal}
  - {feature_selection: top_n}
  - {method: fit_transform, transform: pca}
sklearn_preprocessing:
  log10: {func: 'numpy:log10', method: FunctionTransformer, validate: true}
  require_positive:
    func: elm.sample_util.encoding_scaling:require_positive
    func_kwargs: {small_num: 0.0001}
    method: FunctionTransformer
  standard: {copy: false, method: StandardScaler, with_mean: true, with_std: true}
train:
  kmeans:
    data_source: synthetic
    ensemble: save_one
    fit_kwargs: {}
    keep_columns: []
    model_init_class: sklearn.cluster:MiniBatchKMeans
    model_init_kwargs: {}
    model_scoring: testing_model_scoring
    output_tag: kmeans
transform:
  pca:
    data_source: synthetic
    ensemble: save_one
    model_init_class: sklearn.decomposition:IncrementalPCA
    model_init_kwargs: {n_components: 2}
    model_scoring: null
    model_selection: null
    param_grid: example_param_grid
