data_sources:
  S3_LANDSAT_L2_TIFS:
    band_specs:
    - {name: band_1, search_key: name, search_value: _B1.TIF}
    - {name: band_2, search_key: name, search_value: _B2.TIF}
    - {name: band_3, search_key: name, search_value: _B3.TIF}
    - {name: band_4, search_key: name, search_value: _B4.TIF}
    batch_size: 1440000
    get_y_func: elm.pipeline.tests.util:example_get_y_func_continuous
    reader: tif_example
    sample_args_generator: tif_file_gen
    sample_from_args_func: elm.sample_util.samplers:image_selection
    selection_kwargs: {file_pattern: TIF, top_dir: 'env:ELM_EXAMPLE_DATA_PATH'}
ensembles:
  no_ensemble: {init_ensemble_size: 1, ngen: 1, partial_fit_batches: 1, saved_ensemble_size: 1}
pipeline:
- data_source: S3_LANDSAT_L2_TIFS
  sample_pipeline:
  - {select_canvas: band_1}
  - {flatten: C}
  - {sklearn_preprocessing: require_positive}
  - {drop_na_rows: true}
  - {flatten: C}
  - {random_sample: 10000}
  - {get_y: true}
  steps:
  - {method: fit, train: kmeans}
  - {predict: kmeans}
predict:
  kmeans: {}
readers:
  tif_example: {load_array: 'elm.readers.tif:load_dir_of_tifs_array', load_meta: 'elm.readers.tif:load_dir_of_tifs_meta'}
sample_args_generators: {iter_files_recursively: 'elm.readers.local_file_iterators:iter_files_recursively',
  tif_file_gen: 'elm.readers.local_file_iterators:iter_dirs_of_dirs'}
sklearn_preprocessing:
  require_positive:
    func: elm.sample_util.encoding_scaling:require_positive
    func_kwargs: {small_num: 0.0001}
    method: FunctionTransformer
train:
  kmeans:
    ensemble: no_ensemble
    ensemble_kwargs: {init_ensemble_size: 2, ngen: 1, partial_fit_batches: 1, saved_ensemble_size: 1}
    fit_method: fit
    model_init_class: sklearn.linear_model:Ridge
    model_init_kwargs: {max_iter: 10}
    model_scoring: null
    model_selection: null
    output_tag: kmeans
transform:
  pca:
    ensemble: no_ensemble
    model_init_class: sklearn.decomposition:IncrementalPCA
    model_init_kwargs: {n_components: 2}
    model_scoring: null
