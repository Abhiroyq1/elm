DASK_EXECUTOR: SERIAL
DASK_PROCESSES: null
DASK_SCHEDULER: null
DASK_THREADS: null
LADSWEB_LOCAL_CACHE: null
add_features: {}
aggregations: {}
change_detection:
  time_series: []
data_sources:
  NPP_DSRF1KD_L2GD:
    band_specs:
    - [long_name, 'Band 1 ', band_1]
    - [long_name, 'Band 2 ', band_2]
    - [long_name, 'Band 3 ', band_3]
    - [long_name, 'Band 4 ', band_4]
    - [long_name, 'Band 5 ', band_5]
    - [long_name, 'Band 7 ', band_7]
    - [long_name, 'Band 8 ', band_8]
    - [long_name, 'Band 10 ', band_10]
    - [long_name, 'Band 11 ', band_11]
    batch_size: 1440000
    file_pattern: '*.hdf'
    get_weight_func: null
    get_weight_kwargs: {}
    get_y_func: null
    get_y_kwargs: {}
    keep_columns: []
    reader: hdf4-eos
    sample_args_generator: iter_files_recursively
    sample_args_generator_kwargs: {extension: .hdf, top_dir: 'env:ELM_EXAMPLE_DATA_PATH'}
    sample_from_args_func: elm.sample_util.samplers:image_selection
    selection_kwargs:
      data_filter: null
      filename_filter: null
      geo_filters:
        exclude_polys: []
        include_polys: []
      metadata_filter: null
  S3_LANDSAT_L2_TIFS:
    band_specs:
    - [name, _B1.TIF, band_1]
    - [name, _B2.TIF, band_2]
    - [name, _B3.TIF, band_3]
    - [name, _B4.TIF, band_4]
    - [name, _B5.TIF, band_5]
    - [name, _B6.TIF, band_6]
    - [name, _B7.TIF, band_7]
    - [name, _B9.TIF, band_9]
    - [name, _B10.TIF, band_10]
    - [name, _B11.TIF, band_11]
    batch_size: 1440000
    get_weight_func: null
    get_weight_kwargs: {}
    get_y_func: null
    get_y_kwargs: {}
    keep_columns: []
    reader: dir_of_tifs_reader
    sample_args_generator: tif_file_gen
    sample_args_generator_kwargs: {top_dir: 'env:ELM_EXAMPLE_DATA_PATH'}
    sample_from_args_func: elm.sample_util.samplers:image_selection
    selection_kwargs: {}
ensembles:
  no_ensemble: {batches_per_gen: 1, init_ensemble_size: 1, n_generations: 1, saved_ensemble_size: 1}
  small_ensemble: {batches_per_gen: 4, init_ensemble_size: 16, n_generations: 4, saved_ensemble_size: 4}
feature_selection:
  select_all:
    choices: all
    kwargs: {}
    scoring: chi2
    scoring_kwargs: {}
    selection: all
masks: {}
model_scoring:
  accuracy_score_cv: {greater_is_better: true, needs_proba: false, needs_threshold: false,
    scoring: accuracy_score, scoring_agg: 'numpy:median'}
  ensemble_kmeans_scoring:
    score_weights: [-1]
    scoring: elm.model_selection.kmeans:ensemble_kmeans_scoring
model_selection:
  kmeans_model_averaging:
    func: elm.model_selection.kmeans:kmeans_model_averaging
    kwargs: {drop_n: 0, evolve_n: 1, init_n: 0}
  select_top_n:
    func: elm.model_selection.base:select_top_n_models
    kwargs: {top_n: 1}
pipeline:
- method: fit
  sample_pipeline:
  - {random_sample: 1000}
  transform: tested
polys: {}
predict:
  kmeans:
    data_source: NPP_DSRF1KD_L2GD
    sample_args_generator: iter_files_recursively
    sample_args_generator_kwargs: {extension: .hdf, top_dir: 'env:ELM_EXAMPLE_DATA_PATH'}
readers:
  dir_of_tifs_reader: {load_array: 'elm.readers.tif:load_dir_of_tifs_array', load_meta: 'elm.readers.tif:load_dir_of_tifs_meta'}
  hdf4-eos: {load_array: 'elm.readers.hdf4:load_hdf4_array', load_meta: 'elm.readers.hdf4:load_hdf4_meta'}
resamplers: {}
sample_args_generators: {iter_files_recursively: 'elm.readers.local_file_iterators:iter_files_recursively',
  tif_file_gen: 'elm.readers.local_file_iterators:iter_dirs_of_dirs'}
train:
  kmeans:
    data_source: NPP_DSRF1KD_L2GD
    ensemble: no_ensemble
    fit_kwargs: {}
    keep_columns: []
    model_init_class: sklearn.cluster:MiniBatchKMeans
    model_init_kwargs: {compute_labels: true}
    model_scoring: ensemble_kmeans_scoring
    model_selection: kmeans_model_averaging
    output_tag: kmeans
transform:
  tested:
    data_source: NPP_DSRF1KD_L2GD
    ensemble: no_ensemble
    model_init_class: sklearn.decomposition:TruncatedSVD
    model_init_kwargs: {algorithm: randomized, n_components: 1, n_iter: 5, random_state: null,
      tol: 0.0}
